/**
 * Simple example to demo the esp-link MQTT client
 */

#include <ELClient.h>
#include <ELClientCmd.h>
#include <ELClientMqtt.h>

// Initialize a connection to esp-link using the normal hardware serial port both for
// SLIP and for debug messages.
ELClient esp(&Serial1, &Serial1);

// Initialize CMD client (for GetTime)
ELClientCmd cmd(&esp);

// Initialize the MQTT client
ELClientMqtt mqtt(&esp);

const int analogInPin = A0;
const int digitalInPin = 2;

// Change to your own Thingspeak API key
char MQTT_API_KEY[] = "7FOP4ZYDGN77KNCK";
char *api_key = "2RL7AIB3IR173U0A";
// expand buffer size to your needs
#define BUFLEN 100

// Callback made from esp-link to notify of wifi status changes
// Here we just print something out for grins
void wifiCb(void* response) {
  ELClientResponse *res = (ELClientResponse*)response;
  if (res->argc() == 1) {
    uint8_t status;
    res->popArg(&status, 1);

    if(status == STATION_GOT_IP) {
      Serial.println("WIFI CONNECTED");
    } else {
      Serial.print("WIFI NOT READY: ");
      Serial.println(status);
    }
  }
}

bool connected = false;
static uint32_t last=0;
static bool firstTime = true;

void publishData()
{
  Serial.print("publishing to ");

  // Read analog value and convert to string
  int analogValue = analogRead(analogInPin);
  String analogValString = String(analogValue);
  const char *analogValChar = analogValString.c_str();

  // Read digital value and convert to string
  int digitalValue = digitalRead(digitalInPin);
  String digitalValString = String(digitalValue);
  const char *digitalValChar = digitalValString.c_str();
  
  // Reserve a buffer for sending the data
  String path = "channels/785433/publish/";
  path += api_key;
  Serial.println(path);
  
  // Copy the field number and value into the buffer
  // If you have more than one field to update,
  // repeat and change field1 to field2, field3, ...
  String data = "field1=";
  data += analogValue;
  data += "&field2=";
  data += digitalValue;
  //String data = "field1=27&field2=28";
  Serial.println(data);
  mqtt.publish((char *)path.c_str(), (char *)data.c_str());

  uint32_t t = cmd.GetTime();
  Serial.print("Time: "); Serial.println(t);
}

// Callback when MQTT is connected
void mqttConnected(void* response) {
  Serial.println("MQTT connected!");
  mqtt.subscribe("/esp-link-g4/");
  //mqtt.subscribe("/hello/world/#");
  //mqtt.subscribe("/esp-link/2", 1);
  //mqtt.publish("/esp-link/0", "test1");
  connected = true;
}

// Callback when MQTT is disconnected
void mqttDisconnected(void* response) {
  Serial.println("MQTT disconnected");
  connected = false;
}

// Callback when an MQTT message arrives for one of our subscriptions
void mqttData(void* response) {
  ELClientResponse *res = (ELClientResponse *)response;

  Serial.print("Received: topic=");
  String topic = res->popString();
  Serial.println(topic);

  Serial.print("data=");
  String data = res->popString();
  Serial.println(data);
}

void mqttPublished(void* response) {
  Serial.println("MQTT published");
}

void setup() {
  Serial.begin(115200);
  Serial1.begin(115200);
  last = millis();
  pinMode(analogInPin, INPUT);
  Serial.println("EL-Client starting!");

  // Sync-up with esp-link, this is required at the start of any sketch and initializes the
  // callbacks to the wifi status change callback. The callback gets called with the initial
  // status right after Sync() below completes.
  esp.wifiCb.attach(wifiCb); // wifi status change callback, optional (delete if not desired)
  bool ok;
  do {
    ok = esp.Sync();      // sync up with esp-link, blocks for up to 2 seconds
    if (!ok) Serial.println("EL-Client sync failed!");
  } while(!ok);
  Serial.println("EL-Client synced!");

  // Set-up callbacks for events and initialize with es-link.
  mqtt.connectedCb.attach(mqttConnected);
  mqtt.disconnectedCb.attach(mqttDisconnected);
  mqtt.publishedCb.attach(mqttPublished);
  mqtt.dataCb.attach(mqttData);
  mqtt.setup();
  

  //Serial.println("ARDUINO: setup mqtt lwt");
  //mqtt.lwt("/lwt", "offline", 0, 0); //or mqtt.lwt("/lwt", "offline");

  Serial.println("EL-MQTT ready");
}

static int count;

void loop() {
  esp.Process();
  
  if (connected && ( firstTime || (millis()-last) > 20000) ) {
    publishData();
    firstTime = false;
    last = millis();
 }   
}
